#!/usr/bin/env python

import synistereq.repositories
import synistereq.predict_neurotransmitters
from synistereq.predict_neurotransmitters import predict_neurotransmitters
from synistereq.utils import read_skids_csv, read_positions_csv, format_predictions, write_predictions, log_config
from synistereq.report import generate_report
import argparse

parser = argparse.ArgumentParser()

parser.add_argument("--skids", 
		    help="File with skid column, pre synapses will be grabbed from service", 
		    default=None, required=False)
parser.add_argument("--positions", help="File with id, x,y,z columns representing synaptic locations", 
		    type=str, default=None, required=False)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("--repository", help=', '.join(synistereq.repositories.KNOWN_REPOSITORIES.keys()), 
		    type=str, default=None)
group.add_argument("--dataset", help=', '.join(synistereq.predict_neurotransmitters.known_datasets.keys()), 
		    type=str, default=None)
parser.add_argument("--batch_size", help="Number of locations to predict in each network batch", 
		    type=int, default=24, required=False)
parser.add_argument("--out", help="Output file path", 
		    type=str, default="./predictions.csv", required=False)
parser.add_argument("--report", help="Report file path", 
		    type=str, default="./report.pdf", required=False)
parser.add_argument("--skip-report", help="Do not generate report PDF",
		    action="store_true", required=False)
parser.add_argument("--log", help="Log file output path", 
		    type=str, default="./predictions.log", required=False)

parser.add_argument('--neither', required=False, action='store_true', 
            help='use neither class')

if __name__ == "__main__":
    args = parser.parse_args()
    log_config(args.log)
    skids = None
    if args.skids is not None:
        skids = read_skids_csv(args.skids)

    positions = None
    position_ids = None
    if args.positions is not None:
        positions, position_ids, position_ids_to_skids = read_positions_csv(args.positions)
    else:
        position_ids_to_skids = {}


    nt_probabilities, positions, position_ids, position_ids_to_skids = predict_neurotransmitters(args.dataset,
                                                                                                args.neither, 
                                                                                                args.repository,
                                                                                                skids,
                                                                                                positions,
                                                                                                position_ids,
                                                                                                position_ids_to_skids,
                                                                                                args.batch_size)
    predictions = format_predictions(nt_probabilities,
                                     positions,
                                     position_ids,
                                     position_ids_to_skids)

    write_predictions(predictions, args.out)
    if not args.skip_report:
        generate_report(args.out, args.report)
